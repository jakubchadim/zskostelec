{"version":3,"sources":["webpack:///./src/templates/page.tsx","webpack:///./src/components/block/content.tsx"],"names":["query","Page","wordpressPage","data","parsedBlocks","React","useMemo","parseBlocks","blocks","title","length","content","BlockContent","footer","sections","getBlockSections","map","section","sectionIdx","key","backgroundColor","textColor","memo"],"mappings":"8FACA,0JAmBaA,EAAQ,YA6CNC,UA7BsC,SAAC,GAEhD,IADIC,EACJ,EADJC,KAAQD,cAEFE,EAAeC,IAAMC,SACzB,kBAAMC,YAAYL,EAAcM,QAAU,MAC1C,CAACN,EAAcM,SAGXC,EACJ,kBAAC,IAAD,KACE,4BAAKP,EAAcO,QAIvB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKA,MAAOP,EAAcO,QACzBL,EAAaM,OACZ,kBAAC,IAAD,CAAcF,OAAQJ,EAAcK,MAAOA,IAE3C,kBAAC,IAAD,KACGA,EACD,kBAAC,IAAD,CAASE,QAAST,EAAcS,c,kCC1D1C,6DAYMC,EAAyC,SAAC,GAA8B,IAA5BJ,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,MAAOI,EAAa,EAAbA,OAC/D,IAAKL,IAAWA,EAAOE,OACrB,OAAO,KAGT,IAAMI,EAAWC,YAAiBP,GAElC,OACE,oCACGM,EAASE,KAAI,SAACC,EAASC,GAAV,OACZ,kBAAC,IAAD,CACEC,IAAKD,EACLE,gBAAiBH,EAAQG,gBACzBC,UAAWJ,EAAQI,WAEH,IAAfH,GAAoBT,EACrB,kBAAC,IAAD,CAAWD,OAAQS,EAAQT,SAC1BU,IAAeJ,EAASJ,OAAS,GAAKG,QAOlCR,QAAMiB,KAAKV","file":"component---src-templates-page-tsx-b3f1a5a651a84c6494da.js","sourcesContent":["import { graphql, PageProps } from 'gatsby'\nimport React from 'react'\nimport BlockContent from '../components/block/content'\nimport { TransformedBlock } from '../components/block/types'\nimport { parseBlocks } from '../components/block/utils'\nimport Content from '../components/content/content'\nimport UiContainer from '../components/ui/container/container'\nimport Layout from '../components/layout/layout'\nimport SEO from '../components/seo/seo'\nimport UiSection from '../components/ui/section/section'\nimport { RawHTML } from '../types'\n\ntype WordpressPageData = {\n  wordpressPage: {\n    title: string\n    content: RawHTML\n    blocks: TransformedBlock[]\n  }\n}\n\nexport const query = graphql`\n  query currentPageQuery($id: String!) {\n    wordpressPage(id: { eq: $id }) {\n      title\n      content\n      blocks {\n        blockId\n        parentId\n        type\n        attrs\n        content\n      }\n    }\n  }\n`\n\nconst Page: React.FC<PageProps<WordpressPageData>> = ({\n  data: { wordpressPage }\n}) => {\n  const parsedBlocks = React.useMemo(\n    () => parseBlocks(wordpressPage.blocks || []),\n    [wordpressPage.blocks]\n  )\n\n  const title = (\n    <UiContainer>\n      <h1>{wordpressPage.title}</h1>\n    </UiContainer>\n  )\n\n  return (\n    <Layout>\n      <SEO title={wordpressPage.title} />\n      {parsedBlocks.length ? (\n        <BlockContent blocks={parsedBlocks} title={title} />\n      ) : (\n        <UiSection>\n          {title}\n          <Content content={wordpressPage.content} />\n        </UiSection>\n      )}\n    </Layout>\n  )\n}\n\nexport default Page\n","import React from 'react'\nimport UiSection from '../ui/section/section'\nimport BlockList from './list'\nimport { Block } from './types'\nimport { getBlockSections } from './utils'\n\ntype BlockListProps = {\n  blocks?: Block[]\n  title?: React.ReactNode\n  footer?: React.ReactNode\n}\n\nconst BlockContent: React.FC<BlockListProps> = ({ blocks, title, footer }) => {\n  if (!blocks || !blocks.length) {\n    return null\n  }\n\n  const sections = getBlockSections(blocks)\n\n  return (\n    <>\n      {sections.map((section, sectionIdx) => (\n        <UiSection\n          key={sectionIdx}\n          backgroundColor={section.backgroundColor}\n          textColor={section.textColor}\n        >\n          {sectionIdx === 0 && title}\n          <BlockList blocks={section.blocks} />\n          {sectionIdx === sections.length - 1 && footer}\n        </UiSection>\n      ))}\n    </>\n  )\n}\n\nexport default React.memo(BlockContent)\n"],"sourceRoot":""}